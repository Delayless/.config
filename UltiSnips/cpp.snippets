# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
# snippet main "main(int argc, char *argv[]){}" b
# main(int argc, char *argv[]){$1};
# endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	public:
		${1/(\w+).*/$1/} (${2:arguments});
		virtual ~${1/^_(.*)/$1/} ();

	private:
		${0:/* data */}
};
endsnippet

snippet algorithm "comment block/section" b
/**
  * @brief   ${1:Describe the funtion.
  *          What does this funtion do?}
  * @param   ${2:argument}
  * @retval  ${3:None}
  * @TimeComplexity  ${4:nlogn}
  */
$0
endsnippet

snippet generatearrayfuntion "Description" b
# define random(a,b) (rand()%(b-a)+a)
/**
  * @brief  生成由N个ElementType数据组成的数组，记得自己free
  * @param  N：生成长度为N的数组
  * @retval 内存空间首地址
  */
ElementType * Generate_Array(int N) {
	ElementType * Array = (ElementType *)malloc(N*sizeof(ElementType));
	if (NULL != Array) {
		for (int i=0; i<N; i++)
			Array[i] = random(-200, 200);
		return Array;
	} else {
		cout << "内存分配失败!" << endl;
		exit(-1);
	}
}
endsnippet
